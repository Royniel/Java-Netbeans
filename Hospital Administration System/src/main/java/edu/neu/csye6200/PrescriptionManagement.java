/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package edu.neu.csye6200;
import edu.neu.csye6200.model.Control;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author 91790
 */
public class PrescriptionManagement extends javax.swing.JFrame {

    /**
     * Creates new form PrescriptionManagement
     */
    public PrescriptionManagement() {
        initComponents();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        precriptionTitleHome = new javax.swing.JLabel();
        Back = new javax.swing.JButton();
        id_title = new javax.swing.JLabel();
        pIDinput = new javax.swing.JTextField();
        searchbypatientid = new javax.swing.JButton();
        patient_title = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        fetch_exact_id_row = new javax.swing.JTable();
        title_updated_discription = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        description = new javax.swing.JTextArea();
        title_updated_Medicine = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Medicine = new javax.swing.JTextArea();
        updatePrescription = new javax.swing.JButton();
        Show_Updated_Values_by_previously_searched_id = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        precriptionTitleHome.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        precriptionTitleHome.setText("Prescription Management");

        Back.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Back.setForeground(new java.awt.Color(51, 153, 255));
        Back.setText("Back to Dashboard");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        id_title.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        id_title.setText("Patient ID");

        pIDinput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pIDinputActionPerformed(evt);
            }
        });

        searchbypatientid.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        searchbypatientid.setForeground(new java.awt.Color(51, 153, 255));
        searchbypatientid.setText("Search");
        searchbypatientid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchbypatientidActionPerformed(evt);
            }
        });

        patient_title.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        patient_title.setText("Patient Details");

        fetch_exact_id_row.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Name", "Description", "Doctor Name", "Medicine", "Last Visit"
            }
        ));
        jScrollPane1.setViewportView(fetch_exact_id_row);

        title_updated_discription.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        title_updated_discription.setText("Add Updated Prescription");

        description.setColumns(20);
        description.setRows(5);
        jScrollPane2.setViewportView(description);

        title_updated_Medicine.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        title_updated_Medicine.setText("Add Updated Medicine");

        Medicine.setColumns(20);
        Medicine.setRows(5);
        jScrollPane3.setViewportView(Medicine);

        updatePrescription.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        updatePrescription.setForeground(new java.awt.Color(51, 153, 255));
        updatePrescription.setText("Update Details");
        updatePrescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePrescriptionActionPerformed(evt);
            }
        });

        Show_Updated_Values_by_previously_searched_id.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Show_Updated_Values_by_previously_searched_id.setForeground(new java.awt.Color(51, 153, 255));
        Show_Updated_Values_by_previously_searched_id.setText("Show Updated Values");
        Show_Updated_Values_by_previously_searched_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Show_Updated_Values_by_previously_searched_idActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(title_updated_discription))
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(title_updated_Medicine)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(71, 71, 71)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(updatePrescription, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                                            .addComponent(Show_Updated_Values_by_previously_searched_id, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 953, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Back, javax.swing.GroupLayout.PREFERRED_SIZE, 893, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(precriptionTitleHome, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(418, 418, 418))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(467, 467, 467)
                        .addComponent(patient_title))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(id_title)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pIDinput, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(63, 63, 63)
                        .addComponent(searchbypatientid, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(447, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(precriptionTitleHome, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(id_title)
                    .addComponent(pIDinput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchbypatientid))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(patient_title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(title_updated_discription)
                    .addComponent(title_updated_Medicine))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(updatePrescription, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Show_Updated_Values_by_previously_searched_id)))
                .addGap(52, 52, 52)
                .addComponent(Back, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(134, 134, 134))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        // TODO add your handling code here:
        Dashboard dashboard = new Dashboard();
        dashboard.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BackActionPerformed

    private void pIDinputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pIDinputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pIDinputActionPerformed

    private void updatePrescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePrescriptionActionPerformed
        // TODO add your handling code here:
         updatePrescriptionDetails();
    }//GEN-LAST:event_updatePrescriptionActionPerformed

    private void Show_Updated_Values_by_previously_searched_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Show_Updated_Values_by_previously_searched_idActionPerformed
        // TODO add your handling code here:
        searchPatient();
    }//GEN-LAST:event_Show_Updated_Values_by_previously_searched_idActionPerformed

    private void searchbypatientidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchbypatientidActionPerformed
        // TODO add your handling code here:
        searchPatient();
    }//GEN-LAST:event_searchbypatientidActionPerformed
    
    
 private void searchPatient() {
    String patientId = pIDinput.getText();
    String query = "SELECT id, first_name, last_name, description, doctor_name, medicine, last_visit_date FROM PatientProfile WHERE id = ?";
    
    try (Connection conn = Control.getConnection();
         PreparedStatement pst = conn.prepareStatement(query)) {
        pst.setString(1, patientId);
        try (ResultSet rs = pst.executeQuery()) {
            DefaultTableModel model = (DefaultTableModel) fetch_exact_id_row.getModel();
            model.setRowCount(0);
            while (rs.next()) {
                String fullName = rs.getString("first_name") + " " + rs.getString("last_name");
                model.addRow(new Object[]{
                    rs.getString("id"), fullName, rs.getString("description"), 
                    rs.getString("doctor_name"), rs.getString("medicine"), 
                    rs.getString("last_visit_date")
                });
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException ex) {
        Logger.getLogger(PrescriptionManagement.class.getName()).log(Level.SEVERE, null, ex);
    }
 }


//Method for updating Prescription in PatientProfile Table
    private void updatePrescriptionDetails() {
        String patientId = pIDinput.getText();
        String updatedDescription = description.getText();
        String updatedMedicine = Medicine.getText();
        String query = "UPDATE PatientProfile SET description = ?, medicine = ? WHERE id = ?";

        try (Connection conn = Control.getConnection();
             PreparedStatement pst = conn.prepareStatement(query)) {
            pst.setString(1, updatedDescription);
            pst.setString(2, updatedMedicine);
            pst.setString(3, patientId);
            int updatedRows = pst.executeUpdate();
            if (updatedRows > 0) {
                JOptionPane.showMessageDialog(null, "Prescription Updated Successfully");
            } else {
                JOptionPane.showMessageDialog(null, "No Record Found to Update", "Update Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(PrescriptionManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private boolean isInputValid() {
    if (pIDinput.getText().trim().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please enter a Patient ID", "Input Error", JOptionPane.WARNING_MESSAGE);
        return false;
    }
    return true;
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new PrescriptionManagement().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JTextArea Medicine;
    private javax.swing.JButton Show_Updated_Values_by_previously_searched_id;
    private javax.swing.JTextArea description;
    private javax.swing.JTable fetch_exact_id_row;
    private javax.swing.JLabel id_title;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField pIDinput;
    private javax.swing.JLabel patient_title;
    private javax.swing.JLabel precriptionTitleHome;
    private javax.swing.JButton searchbypatientid;
    private javax.swing.JLabel title_updated_Medicine;
    private javax.swing.JLabel title_updated_discription;
    private javax.swing.JButton updatePrescription;
    // End of variables declaration//GEN-END:variables
}

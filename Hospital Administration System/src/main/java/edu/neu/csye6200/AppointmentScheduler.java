/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package edu.neu.csye6200;

import edu.neu.csye6200.model.Control;
import javax.swing.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author 91790
 */
public class AppointmentScheduler extends javax.swing.JFrame {

    /**
     * Creates new form AppointmentScheduler
     */
    public AppointmentScheduler() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        pick_doctor_name = new javax.swing.JComboBox<>();
        pick_month = new javax.swing.JComboBox<>();
        pick_day = new javax.swing.JComboBox<>();
        pickyear = new javax.swing.JComboBox<>();
        picktime = new javax.swing.JComboBox<>();
        button_appointment = new javax.swing.JButton();
        backtodashboard = new javax.swing.JButton();
        patient_input = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        fetch_exact_id_row = new javax.swing.JTable();
        show_booked_appointments = new javax.swing.JButton();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Appointment Scheduler");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Select Date");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Select Timslot");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Select Doctor");

        pick_doctor_name.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dr Patel", "Dr Roy", "Dr Shah", "Dr Joshi" }));
        pick_doctor_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pick_doctor_nameActionPerformed(evt);
            }
        });

        pick_month.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" }));
        pick_month.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pick_monthActionPerformed(evt);
            }
        });

        pick_day.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        pick_day.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pick_dayActionPerformed(evt);
            }
        });

        pickyear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2023", "2024" }));
        pickyear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickyearActionPerformed(evt);
            }
        });

        picktime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "9:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00" }));
        picktime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                picktimeActionPerformed(evt);
            }
        });

        button_appointment.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        button_appointment.setForeground(new java.awt.Color(51, 153, 255));
        button_appointment.setText("Book Appointment");
        button_appointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_appointmentActionPerformed(evt);
            }
        });

        backtodashboard.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        backtodashboard.setForeground(new java.awt.Color(51, 153, 255));
        backtodashboard.setText("Back to Dashboard");
        backtodashboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backtodashboardActionPerformed(evt);
            }
        });

        patient_input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patient_inputActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Patient_id");

        fetch_exact_id_row.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "Name", "Doctor Name", "Appointment dateVisit", "Time Slot"
            }
        ));
        jScrollPane1.setViewportView(fetch_exact_id_row);

        show_booked_appointments.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        show_booked_appointments.setForeground(new java.awt.Color(51, 153, 255));
        show_booked_appointments.setText("Fetch  Existing Appointment");
        show_booked_appointments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                show_booked_appointmentsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pick_month, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pick_day, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pickyear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(patient_input, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(117, 117, 117)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pick_doctor_name, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(picktime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(335, 335, 335)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(backtodashboard)
                        .addGap(572, 572, 572)
                        .addComponent(button_appointment))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(show_booked_appointments)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 838, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(140, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(picktime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patient_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pick_doctor_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pick_month, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pick_day, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pickyear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addComponent(show_booked_appointments)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backtodashboard)
                    .addComponent(button_appointment))
                .addContainerGap(72, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_appointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_appointmentActionPerformed
        String patientId = patient_input.getText().trim();
        String doctor = pick_doctor_name.getSelectedItem().toString();
        String date = pickyear.getSelectedItem().toString() + "-" +
                      getMonthNumber(pick_month.getSelectedItem().toString()) + "-" +
                      pick_day.getSelectedItem().toString();
        String time = picktime.getSelectedItem().toString();

        if (patientId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter the patient ID.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            bookAppointment(Integer.parseInt(patientId), doctor, date, time);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid Patient ID", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }// TODO add your handling code here:
    }//GEN-LAST:event_button_appointmentActionPerformed
private void bookAppointment(int patientId, String doctor, String date, String time) throws SQLException {
        String sql = "INSERT INTO AppointmentScheduler (patient_id, doctor_name, appointment_date, timeslot) VALUES (?, ?, ?, ?)";

        try (Connection conn = Control.getConnection();  // Assuming DatabaseConnection class exists
            PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, patientId);
            pstmt.setString(2, doctor);
            pstmt.setString(3, date);
            pstmt.setString(4, time);
            pstmt.executeUpdate();
            JOptionPane.showMessageDialog(this, "Appointment booked successfully for " + date + " at " + time, "Success", JOptionPane.INFORMATION_MESSAGE);
        }
    }

 // Converting month name to month number
    private String getMonthNumber(String monthName) {
        String[] months = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
        for (int i = 0; i < months.length; i++) {
            if (months[i].equals(monthName)) {
                return String.format("%02d", i + 1);
            }
        }
        return "01"; // Default to January
    }
    private void backtodashboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backtodashboardActionPerformed
        // TODO add your handling code here:
        Dashboard dashboard= new Dashboard();
        dashboard.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backtodashboardActionPerformed

    
    
    private void patient_inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patient_inputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patient_inputActionPerformed

    private void pick_monthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pick_monthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pick_monthActionPerformed

    private void pick_dayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pick_dayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pick_dayActionPerformed

    private void pickyearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickyearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pickyearActionPerformed

    private void picktimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_picktimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_picktimeActionPerformed

    private void pick_doctor_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pick_doctor_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pick_doctor_nameActionPerformed

    private void show_booked_appointmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_show_booked_appointmentsActionPerformed
        // TODO add your handling code here:
        String patientId = patient_input.getText().trim();

    if (patientId.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter the patient ID.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        fetchAppointments(Integer.parseInt(patientId));
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid Patient ID", "Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_show_booked_appointmentsActionPerformed
    
    
    private void fetchAppointments(int patientId) throws SQLException {
        String sql = "SELECT appointment_id, doctor_name, appointment_date, timeslot FROM AppointmentScheduler WHERE patient_id = ?";

    try (Connection conn = Control.getConnection(); // Assuming Control.getConnection() establishes the database connection
         PreparedStatement pstmt = conn.prepareStatement(sql)) {
        pstmt.setInt(1, patientId);
        ResultSet rs = pstmt.executeQuery();
        populateTable(fetch_exact_id_row, rs);
    }catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid Patient ID", "Error", JOptionPane.ERROR_MESSAGE);
    }
}
   private void populateTable(JTable table, ResultSet rs) throws SQLException {
    DefaultTableModel model = new DefaultTableModel();
    table.setModel(model);

    // metadata for column names
    ResultSetMetaData metaData = rs.getMetaData();
    int columnCount = metaData.getColumnCount();

    // array for column names
    String[] columnNames = new String[columnCount];
    for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
        columnNames[columnIndex - 1] = metaData.getColumnName(columnIndex);
    }

    // Setting column names in model
    model.setColumnIdentifiers(columnNames);

    // Adding data rows to the model
    while (rs.next()) {
        Object[] row = new Object[columnCount];
        for (int i = 1; i <= columnCount; i++) {
            row[i - 1] = rs.getObject(i);
        }
        model.addRow(row);
    }
}
   

    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppointmentScheduler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new AppointmentScheduler().setVisible(true);
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backtodashboard;
    private javax.swing.JButton button_appointment;
    private javax.swing.JTable fetch_exact_id_row;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField patient_input;
    private javax.swing.JComboBox<String> pick_day;
    private javax.swing.JComboBox<String> pick_doctor_name;
    private javax.swing.JComboBox<String> pick_month;
    private javax.swing.JComboBox<String> picktime;
    private javax.swing.JComboBox<String> pickyear;
    private javax.swing.JButton show_booked_appointments;
    // End of variables declaration//GEN-END:variables

   
}

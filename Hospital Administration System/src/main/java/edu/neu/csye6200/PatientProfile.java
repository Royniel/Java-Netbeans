/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package edu.neu.csye6200;
import edu.neu.csye6200.model.Patient;
import java.util.List;
import java.awt.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 91790
 */
public class PatientProfile extends javax.swing.JFrame {
    private static final String CSV_FILE_PATH = "C:/Users/Admin/Downloads/patientprofile.csv";
    private List<Patient> patientList;
    /**
     * Creates new form PatientProfile
     */
    public PatientProfile() {
        initComponents();
        patientList = readPatientsFromCSV(CSV_FILE_PATH);
        updateTable(patientList); 
    }
    private List<Patient> readPatientsFromCSV(String filePath) {
           List<Patient> patients = new ArrayList<>();
    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
        String line;
        boolean firstLine = true;
        while ((line = br.readLine()) != null) {
            if (firstLine) {
                firstLine = false;
                if (line.startsWith("\uFEFF")) {
                    line = line.substring(1); // Remove BOM
                }
            }
            String[] values = line.split(",");
            if (values.length >= 6) { // Ensure there are enough values
                try {
                    int id = Integer.parseInt(values[0].trim());
                    String firstName = values[1].trim();
                    String lastName = values[2].trim();
                    String description = values[3].trim();
                    String doctorName = values[4].trim();
                    String lastVisitDate = values[5].trim();
                    patients.add(new Patient(id, firstName, lastName, description, doctorName, lastVisitDate));
                } catch (NumberFormatException e) {
                    System.out.println("Error parsing patient data: " + e.getMessage());
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace(); // Log the exception
    }
    return patients;
}
    
    private List<Patient> filterPatientsByName(String name) {
        List<Patient> filtered = new ArrayList<>();
        for (Patient p : patientList) {
            if (p.getFirstName().equalsIgnoreCase(name) || p.getLastName().equalsIgnoreCase(name)) {
                filtered.add(p);
            }
        }
        return filtered;
    }
        
     private void updateTable(List<Patient> patients) {
        DefaultTableModel model = (DefaultTableModel) patientTable.getModel();
        model.setRowCount(0); // Clear existing data
        for (Patient p : patients) {
            model.addRow(new Object[]{p.getId(), p.getFirstName(), p.getLastName(), p.getDescription(), p.getDoctorName(), p.getLastVisitDate()});
        }
    }
        
     private List<Patient> filterPatientsById(int id) {
        List<Patient> filtered = new ArrayList<>();
        for (Patient p : patientList) {
            if (p.getId() == id) {
                filtered.add(p);
            }
        }
        return filtered;
    }
    
      private List<Patient> filterPatientsByDate(String date) {
        List<Patient> filtered = new ArrayList<>();
        for (Patient p : patientList) {
            if (p.getLastVisitDate().equals(date)) {
                filtered.add(p);
            }
        }
        return filtered;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        backtopcreatepatient = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        patientName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        patientID = new javax.swing.JTextField();
        patientDate = new javax.swing.JTextField();
        fetchbyfilter = new javax.swing.JButton();
        ViewallPatientClearallFilter = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientTable = new javax.swing.JTable();
        backtodashboard = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("PATIENT PROFILE");

        backtopcreatepatient.setBackground(new java.awt.Color(255, 255, 255));
        backtopcreatepatient.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        backtopcreatepatient.setForeground(new java.awt.Color(51, 153, 255));
        backtopcreatepatient.setText("CREATE NEW PATIENT PROFILE");
        backtopcreatepatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backtopcreatepatientActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("SEARCH EXISTING PATIENTS");

        patientName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientNameActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel3.setText("BY NAME");

        jLabel4.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel4.setText("BY ID");

        jLabel5.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel5.setText("BY DATE");

        patientID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientIDActionPerformed(evt);
            }
        });

        fetchbyfilter.setBackground(new java.awt.Color(255, 255, 255));
        fetchbyfilter.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        fetchbyfilter.setForeground(new java.awt.Color(51, 153, 255));
        fetchbyfilter.setText("FETCH");
        fetchbyfilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fetchbyfilterActionPerformed(evt);
            }
        });

        ViewallPatientClearallFilter.setBackground(new java.awt.Color(255, 255, 255));
        ViewallPatientClearallFilter.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        ViewallPatientClearallFilter.setForeground(new java.awt.Color(51, 153, 255));
        ViewallPatientClearallFilter.setText("VIEW ALL PATIENT DETAILS");
        ViewallPatientClearallFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewallPatientClearallFilterActionPerformed(evt);
            }
        });

        patientTable.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        patientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Patient id", "Patient First Name", "Patient Last Name", "Description", "Doctor Name", "nullLast Visited Date"
            }
        ));
        jScrollPane1.setViewportView(patientTable);

        backtodashboard.setBackground(new java.awt.Color(255, 255, 255));
        backtodashboard.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        backtodashboard.setForeground(new java.awt.Color(51, 153, 255));
        backtodashboard.setText("Brdack To Dashboard");
        backtodashboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backtodashboardActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 606, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(191, 191, 191)
                                .addComponent(backtopcreatepatient, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backtodashboard, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(50, 50, 50)
                                .addComponent(ViewallPatientClearallFilter))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(464, 464, 464)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(patientID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(patientName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(patientDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(21, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(276, 276, 276)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fetchbyfilter, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 783, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backtopcreatepatient, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientName, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientID, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientDate, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fetchbyfilter, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ViewallPatientClearallFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backtodashboard, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void patientNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientNameActionPerformed

    private void patientIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientIDActionPerformed

    private void fetchbyfilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fetchbyfilterActionPerformed
        List<Patient> filteredPatients = new ArrayList<>(patientList);

        if (!patientName.getText().isEmpty()) {
            filteredPatients = filterPatientsByName(patientName.getText());
        }
        if (!patientID.getText().isEmpty()) {
            int id = Integer.parseInt(patientID.getText());
            filteredPatients = filterPatientsById(id);
        }
        if (!patientDate.getText().isEmpty()) {
            filteredPatients = filterPatientsByDate(patientDate.getText());
        }

        updateTable(filteredPatients);
    //patientDetails.add// TODO add your handling code here:
    }//GEN-LAST:event_fetchbyfilterActionPerformed

    private void backtodashboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backtodashboardActionPerformed
        // TODO add your handling code here:
        Dashboard dashboard = new Dashboard();
        dashboard.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backtodashboardActionPerformed

    private void backtopcreatepatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backtopcreatepatientActionPerformed
        // TODO add your handling code here:
        Createpatient createPatient = new Createpatient();
        createPatient.setVisible(true);
    }//GEN-LAST:event_backtopcreatepatientActionPerformed

    private void ViewallPatientClearallFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewallPatientClearallFilterActionPerformed
        // TODO add your handling code here:
    patientName.setText("");
    patientID.setText("");
    patientDate.setText("");

    // Reload all patients from the CSV file
    patientList = readPatientsFromCSV(CSV_FILE_PATH);
    updateTable(patientList);
        
    }//GEN-LAST:event_ViewallPatientClearallFilterActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PatientProfile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PatientProfile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PatientProfile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PatientProfile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new PatientProfile().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ViewallPatientClearallFilter;
    private javax.swing.JButton backtodashboard;
    private javax.swing.JButton backtopcreatepatient;
    private javax.swing.JButton fetchbyfilter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField patientDate;
    private javax.swing.JTextField patientID;
    private javax.swing.JTextField patientName;
    private javax.swing.JTable patientTable;
    // End of variables declaration//GEN-END:variables
}
